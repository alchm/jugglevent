/////////////////
// Models module
/////////////////

/*
 Initialization function
 Loads Mongoose schemas then declares Mongoose models
 */
function init(mongoose) {
    var Schema = mongoose.Schema,
        ObjectId = Schema.ObjectId,
        ObjectIdType = mongoose.Types.ObjectId;

    /*
     CitySchema declares the database schema for cities 
     */
    var CitySchema = new Schema({
        name : {
            type : String,          //
            required : true,        //
            unique : true           //
        }
    });

    /*
     UserSchema declares the database schema for users
     */
    var UserSchema = new Schema({
        firstname : { type : String, required : true }, // (String) firstname contains the user's firstname

        lastname : { type : String, required : true },  // (String) lastname contains the user's lastname

        /*
         username field represents the user username (generally like "firstname.lastname")
         It is unique and allow the user to log in with (TODO)
         It is used in URL like www.jugglevent.com/firstname.lastname to access the user's profile page
         */
        username : { type : String, required : true, unique : true },

        /*
         Password
         */
        password : { type : String, required : true },

        /*
         Email
         */
        email : { type: String, required: true, unique: true },

        /*
         City
         */
        city :  {
            type : ObjectId,        // (ObjectId) city.type contains the ObjectId referencing the related CitySchema
            ref : 'CitySchema'      // (String) city.ref contains the referenced object name
        },
        followers : [],             // (Array)  followers contains the user's followers
        following : [],             // (Array)  following contains the user's following users
        events : [],                // (Array)  events contains the user's events
        networks : [    ],              // (Array)  associations contains the user's associations
        creationDate : {
            type : Date,            //
            default : Date.now,     //
            required : true         //
        }
    });

    /*
     EventSchema declares the database schema for events
     */
    var EventSchema = new Schema({
        start :     { type : Date, required : true, default : Date.now },
        end :       { type : Date, required : true, default : Date.now },
        users :     [],                 //
        pictures :  []               //
    });

    /*
     AssociationSchema declares the database schema for associations
     */
    var AssociationSchema = new Schema({
        city:           { type : ObjectId,      required : true, ref : 'CitySchema' },
        school:         { type : ObjectId,      required : true, ref : 'SchoolSchema' },
        name:           { type : String,        required : true, unique : true },
        contact :       { type : String,        required : true, unique : true },
        picture :       { type : String },
        admins :        [ { type : ObjectId,    ref : 'User' } ],
        followers :     [],
        creationDate :  { type : Date,          required : true, default : Date.now }
    });

    var SchoolSchema = new Schema({
        name : { type : String, required : true, unique : true }
    });

    // Models declaration
    mongoose.model('City',          CitySchema);                 //
    mongoose.model('User',          UserSchema);                 // Mongoose models declaration
    mongoose.model('Event',         EventSchema);               // Mongoose now contains created models
    mongoose.model('Association',   AssociationSchema);   // MyModel model is accessible by mongoose.model('MyModel');
    mongoose.model('School',        SchoolSchema);
}
exports.init = init;